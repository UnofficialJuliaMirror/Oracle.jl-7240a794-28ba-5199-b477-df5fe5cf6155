
const PREFIX = joinpath(@__DIR__, "usr")
const DOWNLOADS = joinpath(PREFIX, "downloads")
const DEPS_FILE = joinpath(@__DIR__, "deps.jl")
const SRC_DIR = joinpath(PREFIX, "src")
const LIB_DIR = joinpath(PREFIX, "lib")
#const INSTANT_CLIENT_DOWNLOAD_FILE = "instantclient-basic-linux.x64-18.3.0.0.0dbru.zip"
#const INSTANT_CLIENT_DOWNLOAD_URL = "https://felipenoris.s3.nl-ams.scw.cloud/$INSTANT_CLIENT_DOWNLOAD_FILE"
#const INSTANT_CLIENT_LOCAL_FILEPATH = joinpath(DOWNLOADS, INSTANT_CLIENT_DOWNLOAD_FILE)

const ODPI_SOURCE_URL = "https://github.com/oracle/odpi/archive/v3.0.0.tar.gz"
const ODPI_SOURCE_LOCAL_FILEPATH = joinpath(DOWNLOADS, "odpi_source.tar.gz")

@static if Sys.islinux()
    const SHARED_LIB = joinpath(PREFIX, "lib", "libdpi.so.3.0.0")
elseif Sys.isapple()
    const SHARED_LIB = joinpath(PREFIX, "lib", "libdpi.3.0.0.dylib")
else
    error("Target system not supported.")
end

mkdir_if_not_exists(dir) = !isdir(dir) && mkdir(dir)

function download_source_files()
    mkdir_if_not_exists(PREFIX)
    mkdir_if_not_exists(DOWNLOADS)

#=
    if !isfile(INSTANT_CLIENT_LOCAL_FILEPATH)
        download(INSTANT_CLIENT_DOWNLOAD_URL, INSTANT_CLIENT_LOCAL_FILEPATH)
        @assert isfile(INSTANT_CLIENT_LOCAL_FILEPATH)
    end
=#

    if !isfile(ODPI_SOURCE_LOCAL_FILEPATH)
        download(ODPI_SOURCE_URL, ODPI_SOURCE_LOCAL_FILEPATH)
    end
end

function untar_source_files(; verbose::Bool=false)
    # tar -xf $ODPI_SOURCE_LOCAL_FILEPATH -C $SRC_DIR --strip-components=1
    mkdir_if_not_exists(SRC_DIR)
    cmd_array = ["tar", "-xf", ODPI_SOURCE_LOCAL_FILEPATH, "-C", SRC_DIR, "--strip-components=1"]
    actual_cmd = Cmd(cmd_array)
    verbose && println(actual_cmd)
    run(Cmd(actual_cmd, dir=PREFIX))
end

function patch(original_file, patch_file, output_file)
    @assert isfile(original_file) && isfile(patch_file)

    function copy_content(io_in, io_out)
        while !eof(io_in)
            write(io_out, read(io_in, UInt8))
        end
    end

    open(output_file, "w") do io_out
        open(original_file, "r") do io_in
            copy_content(io_in, io_out)
        end

        open(patch_file, "r") do io_in
            copy_content(io_in, io_out)
        end
    end
end

function build_shared_library(; verbose::Bool=false)
    download_source_files()
    untar_source_files()
    mkdir_if_not_exists(LIB_DIR)

    # apply patch
    original_file = joinpath(SRC_DIR, "embed", "dpi.c")
    patch_file = joinpath(@__DIR__, "dpi_patch.c")
    patched_file = joinpath(SRC_DIR, "embed", "dpi_patched.c")
    patch(original_file, patch_file, patched_file)

    @static if Sys.islinux()
        #=
        cc -c -fPIC -I ../include -ldl -o dpi.o dpi.c
        cc -shared -fPIC -Wl,-soname,libdpi.so.3 -o ../lib/libdpi.so.3.0.0 dpi.o -lc
        =#

        build_script = [
            ["cc", "-c", "-fPIC", "-I", joinpath(SRC_DIR, "include"), "-ldl", "-o", joinpath(SRC_DIR, "embed", "dpi.o"), patched_file],
            ["cc", "-shared", "-fPIC", "-Wl,-soname,libdpi.so.3", "-o", SHARED_LIB, joinpath(SRC_DIR, "embed", "dpi.o"), "-lc"]
        ]

    elseif Sys.isapple()
        #=
        cc -dynamiclib -I ../include -o ../lib/libdpi.dylib dpi.c
        =#

        build_script = [
            ["cc", "-dynamiclib", "-I", joinpath(SRC_DIR, "include"), "-o", SHARED_LIB, patched_file]
        ]

    else
        error("Target system not supported.")
    end

    for cmd_array in build_script
        actual_cmd = Cmd(cmd_array)
        verbose && println(actual_cmd)
        run(Cmd(actual_cmd, dir=PREFIX))
    end

    @assert isfile(SHARED_LIB) "Failed building libdpi shared library."
    clean()
end

function clean()
    rm(SRC_DIR, recursive=true)
    rm(DOWNLOADS, recursive=true)
end

function write_deps_file()
    @assert isfile(SHARED_LIB) "Couldn't find shared library $SHARED_LIB."
    lib_file = basename(SHARED_LIB)

    deps_file_content = """
# This file is generated by build.jl and should be called
# from `check_deps()` from within your module's `__init__()` method
if isdefined((@static VERSION < v"0.7.0-DEV.484" ? current_module() : @__MODULE__), :Compat)
    import Compat.Libdl
elseif VERSION >= v"0.7.0-DEV.3382"
    import Libdl
end
const libdpi = joinpath(@__DIR__, "usr", "lib", "$lib_file")
function check_deps()
    global libdpi
    if !isfile(libdpi)
        error("\$(libdpi) does not exist, Please re-run Pkg.build(\\"Oracle\\"), and restart Julia.")
    end

    if Libdl.dlopen_e(libdpi) in (C_NULL, nothing)
        error("\$(libdpi) cannot be opened, Please re-run Pkg.build(\\"Oracle\\"), and restart Julia.")
    end
end
"""

    open(DEPS_FILE, "w") do f
        write(f, deps_file_content)
    end
end

function main()
    if !isfile(SHARED_LIB)
        build_shared_library()
    end

    write_deps_file()
end

main()
